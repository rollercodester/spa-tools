"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[8690],{9316:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(7458),s=n(7996),d=n(5207);const r={title:"deepMerge",pagination_label:"Data Utilities: deepMerge",pagination_next:"utilities/data/download-csv-file",pagination_prev:"utilities/data/deep-equal",sidebar_label:"deepMerge",slug:"/utilities/data/deep-merge"},a="deepMerge()",l={id:"utilities/data/deep-merge",title:"deepMerge",description:"It's a trivial task to merge one object into another via the ES6 spread ... operator",source:"@site/docs/utilities/data/deep-merge.mdx",sourceDirName:"utilities/data",slug:"/utilities/data/deep-merge",permalink:"/spa-tools/utilities/data/deep-merge",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"deepMerge",pagination_label:"Data Utilities: deepMerge",pagination_next:"utilities/data/download-csv-file",pagination_prev:"utilities/data/deep-equal",sidebar_label:"deepMerge",slug:"/utilities/data/deep-merge"},sidebar:"docs",previous:{title:"Data Utilities: deepEqual",permalink:"/spa-tools/utilities/data/deep-equal"},next:{title:"Data Utilities: downloadCsvFile",permalink:"/spa-tools/utilities/data/download-csv-file"}},o={},c=[{value:"Usage",id:"usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3}];function h(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(d.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,i.jsx)(t.h1,{id:"deepmerge",children:"deepMerge()"}),"\n",(0,i.jsxs)(t.p,{children:["It's a trivial task to merge one object into another via the ES6 spread ",(0,i.jsx)(t.code,{children:"..."})," operator\nas long as the data is simple and not nested, but it can lead to bugs in code down the\nroad if the underlying data changes to be more complex."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"deepMerge<T>()"})," function is safer in this regard because it will merge any data\nno matter how complex or nested it is. Moverover, if you're using TypeScript, you can\nspecify what the resulting type of the merged data will be."]}),"\n",(0,i.jsxs)(t.p,{children:["As just eluded, the generic ",(0,i.jsx)(t.code,{children:"T"})," type is used to define the type of the end-state merged data that is returned."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { deepMerge } from '@spa-tools/utilities';\n\nconst person1 = {\n  address: {\n    city: 'New York',\n    country: 'USA',\n  },\n  childrenAges: [8, 10],\n  id: 1,\n  name: 'John',\n};\n\nconst person2 = {\n  address: {\n    state: 'NY',\n  },\n  childrenAges: [12],\n  id: 2,\n  name: 'John',\n};\n\nconst mergedLeft = deepMerge(person1, person2, 'left');\nconsole.log(mergedLeft);\n// --\x3e\n// {\n//   address: {\n//     city: 'New York',\n//     country: 'USA',\n//     state: 'NY'\n//   },\n//   childrenAges: [8, 10, 12],\n//   id: 1,\n//   name: 'John'\n// }\n\nconst mergedRight = deepMerge(person2, person1);\nconsole.log(mergedRight);\n// --\x3e\n// {\n//   address: {\n//     city: 'New York',\n//     country: 'USA',\n//     state: 'NY'\n//   },\n//   childrenAges: [12, 8, 10],\n//   id: 2,\n//   name: 'John'\n// }\n"})}),"\n",(0,i.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"left"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"unknown"})}),(0,i.jsx)(t.td,{children:"The first data item to merge"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"right"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"unknown"})}),(0,i.jsx)(t.td,{children:"The second data item to merge"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"precedence"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"'left' | 'right'"})}),(0,i.jsx)(t.td,{children:"Which data item that takes merge precedence"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"T"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);