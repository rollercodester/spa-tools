"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[1713],{2591:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>c});var i=s(7458),a=s(7996),n=s(5207);const d={title:"getNestedValue",pagination_label:"Data Utilities: getNestedValue",pagination_next:"utilities/data/hash",pagination_prev:"utilities/data/download-file",sidebar_label:"getNestedValue",slug:"/utilities/data/get-nested-value"},l="getNestedValue()",r={id:"utilities/data/get-nested-value",title:"getNestedValue",description:"As much as we'd like to always access data statically with properties known at build time, the",source:"@site/docs/utilities/data/get-nested-value.mdx",sourceDirName:"utilities/data",slug:"/utilities/data/get-nested-value",permalink:"/spa-tools/utilities/data/get-nested-value",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"getNestedValue",pagination_label:"Data Utilities: getNestedValue",pagination_next:"utilities/data/hash",pagination_prev:"utilities/data/download-file",sidebar_label:"getNestedValue",slug:"/utilities/data/get-nested-value"},sidebar:"docs",previous:{title:"Data Utilities: downloadFile",permalink:"/spa-tools/utilities/data/download-file"},next:{title:"Data Utilities: hash",permalink:"/spa-tools/utilities/data/hash"}},o={},c=[{value:"Usage",id:"usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3}];function h(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,i.jsx)(t.h1,{id:"getnestedvalue",children:"getNestedValue()"}),"\n",(0,i.jsx)(t.p,{children:"As much as we'd like to always access data statically with properties known at build time, the\nreality is that sooner or later you're going to need to access nested data via a dot-notated string."}),"\n",(0,i.jsxs)(t.p,{children:["Should this requirement ever rear its ugly head, you can use the ",(0,i.jsx)(t.code,{children:"getNestedValue<T>()"})," function\nto retrieve nested data values via a string in a type-safe manner."]}),"\n",(0,i.jsxs)(t.p,{children:["The generic ",(0,i.jsx)(t.code,{children:"T"})," type is used to define the type of the property that is returned."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { getNestedValue } from '@spa-tools/utilities';\n\nconst person = {\n  address: {\n    city: 'New York',\n    country: 'USA',\n  },\n  childrenAges: [8, 10],\n  id: 1,\n  name: 'John',\n};\n\nconst city = getNestedValue(person, 'address.city', 'unknown city');\nconsole.log(city);\n// --\x3e  'New York'\n\nconst zipCode = getNestedValue(person, 'address.zipCode', 'n/a');\nconsole.log(zipCode);\n// --\x3e  'n/a'\n"})}),"\n",(0,i.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"data"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"unknown"})}),(0,i.jsx)(t.td,{children:"The object holding nested property to access"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"dataDotPath"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"The string dot-notation path of property location"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"defaultValue"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"T"})}),(0,i.jsx)(t.td,{children:"The value to return if the property is not found"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.p,{children:["Returns either the found property value or default value as ",(0,i.jsx)(t.code,{children:"T"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);