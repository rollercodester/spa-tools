"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[2136],{3356:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var r=n(7458),s=n(7996),o=n(5207);const a={title:"useQueryState",pagination_label:"Interaction Hooks: useQueryState",pagination_next:"utilities/getting-started",pagination_prev:"interaction-hooks/use-is-overflowed",sidebar_label:"useQueryState",slug:"/interaction-hooks/use-query-state"},i="useQueryState()",d={id:"interaction-hooks/use-query-state",title:"useQueryState",description:"Have you ever needed to interact with the browser URL's querystring values and even update them without triggering hard reloads?",source:"@site/docs/interaction-hooks/use-query-state.mdx",sourceDirName:"interaction-hooks",slug:"/interaction-hooks/use-query-state",permalink:"/spa-tools/interaction-hooks/use-query-state",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useQueryState",pagination_label:"Interaction Hooks: useQueryState",pagination_next:"utilities/getting-started",pagination_prev:"interaction-hooks/use-is-overflowed",sidebar_label:"useQueryState",slug:"/interaction-hooks/use-query-state"},sidebar:"docs",previous:{title:"Interaction Hooks: useIsOverflowed",permalink:"/spa-tools/interaction-hooks/use-is-overflowed"},next:{title:"Utilities: Getting Started",permalink:"/spa-tools/utilities"}},l={},u=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"UseQueryStateResult",id:"usequerystateresult",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.D_,{packageName:"@spa-tools/interaction-hooks"}),"\n",(0,r.jsx)(t.h1,{id:"usequerystate",children:"useQueryState()"}),"\n",(0,r.jsx)(t.p,{children:"Have you ever needed to interact with the browser URL's querystring values and even update them without triggering hard reloads?"}),"\n",(0,r.jsx)(t.p,{children:"Maybe your users want to bookmark a view with a particular filter-set they've defined? Or maybe you want to remember the sort column/direction settings a user last selected for a view? So many scenarios, if only it wasn't a pain, right?"}),"\n",(0,r.jsxs)(t.p,{children:["Pain no more! The ",(0,r.jsx)(t.code,{children:"useQueryState<S>"})," hook is here to save the day!"]}),"\n",(0,r.jsxs)(t.p,{children:["The generic ",(0,r.jsx)(t.code,{children:"S"})," type is used to define the shape of the query state object."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { useQueryState } from '@spa-tools/interaction-hooks';\n\n// here we edefine the shape for our query state\ninterface SortColumnInfo {\n  sortColumn: string;\n  sortDirection: 'ASC' | 'DESC';\n}\n\nfunction UseQueryStateExample() {\n  // we pass true to the useQueryState hook to enable the cache (i.e. localStorage)\n  // feature so that the query state for this view is remembered across page reloads\n  const { queryState, setQueryState } = useQueryState<SortColumnInfo>(true);\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={() => {\n            // here we set the query state to sort by age in descending order\n            setQueryState({ sortColumn: 'age', sortDirection: 'DESC' });\n          }}\n        >\n          Sort by Age (DESC)\n        </button>\n        <button\n          onClick={() => {\n            // here we set the query state to sort by name in ascending order\n            setQueryState({ sortColumn: 'name', sortDirection: 'ASC' });\n          }}\n        >\n          Sort by Name (ASC)\n        </button>\n        <button\n          onClick={() => {\n            // here we hard reload the page with querystring removed\n            // to test the cache feature\n            window.location.href = window.location.href.split('?')[0];\n          }}\n        >\n          Hard reload to test cache\n        </button>\n        <button\n          onClick={() => {\n            // here we clear the query state\n            setQueryState(null);\n          }}\n        >\n          Clear sort settings\n        </button>\n      </div>\n      <div>\n        {queryState === null ? (\n          `Click one of the \"Sort by\" buttons and watch the browser's URL and also how this text changes!`\n        ) : (\n          <span>\n            Sort column <strong>{queryState.sortColumn}</strong> in <em>{queryState.sortDirection}</em> direction!\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Required?"}),(0,r.jsx)(t.th,{children:"Default"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"useLocalStorage"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"boolean"})}),(0,r.jsx)(t.td,{children:"no"}),(0,r.jsx)(t.td,{children:"false"}),(0,r.jsxs)(t.td,{children:["If ",(0,r.jsx)(t.code,{children:"true"})," localStorage will be used so that the query state will be cached using current browser URL as the state key"]})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(t.p,{children:["Returns a ",(0,r.jsx)(t.a,{href:"#usequerystateresult",children:(0,r.jsx)(t.code,{children:"UseQueryStateResult"})})," object."]}),"\n",(0,r.jsx)(t.h3,{id:"usequerystateresult",children:"UseQueryStateResult"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"UseQueryStateResult<S>"})," is the object returned from the ",(0,r.jsx)(t.code,{children:"useQueryState"})," hook."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Prop"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Comments"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"queryState"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"S"})}),(0,r.jsx)(t.td,{children:"The current query state that is auto-parsed from the browser URL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"setQueryState"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"(newQueryState: S | null) => void"})}),(0,r.jsx)(t.td,{children:"Function used to modify the URL's query state"})]})]})]})]})}function c(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);