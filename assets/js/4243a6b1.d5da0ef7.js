"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[3354],{6332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var o=n(7458),a=n(7996),i=n(5207);const s={title:"Pagination",pagination_label:"API Client Guide: Pagination",pagination_next:"api-client/guide-react-append-data",pagination_prev:"api-client/guide-result-mapping",sidebar_label:"Pagination",slug:"/api-client/guides/pagination"},r="Pagination",l={id:"api-client/guide-pagination",title:"Pagination",description:"You can run but you cannot hide. Sooner or later you will have to deal with backend data pagination. Even if you don't impelment pagination on the frontend (yay! for infinite scroll), smart backend APIs will not just allow you to silly-nilly request all of a domain's data in one shot, nor should they.",source:"@site/docs/api-client/guide-pagination.mdx",sourceDirName:"api-client",slug:"/api-client/guides/pagination",permalink:"/spa-tools/api-client/guides/pagination",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Pagination",pagination_label:"API Client Guide: Pagination",pagination_next:"api-client/guide-react-append-data",pagination_prev:"api-client/guide-result-mapping",sidebar_label:"Pagination",slug:"/api-client/guides/pagination"},sidebar:"docs",previous:{title:"API Client Guide: Result Mapping",permalink:"/spa-tools/api-client/guides/result-mapping"},next:{title:"API Client Guide: Appending Data (React)",permalink:"/spa-tools/api-client/guides/react-append-data"}},d={},p=[{value:"Skip-based",id:"skip-based",level:2},{value:"Token-based",id:"token-based",level:2}];function u(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,o.jsx)(t.h1,{id:"pagination",children:"Pagination"}),"\n",(0,o.jsx)(t.p,{children:"You can run but you cannot hide. Sooner or later you will have to deal with backend data pagination. Even if you don't impelment pagination on the frontend (yay! for infinite scroll), smart backend APIs will not just allow you to silly-nilly request all of a domain's data in one shot, nor should they."}),"\n",(0,o.jsxs)(t.p,{children:["Currently the ",(0,o.jsx)(t.code,{children:"@spa-tools/api-client"})," has built-in support for two pervasive models of API pagination: ",(0,o.jsx)(t.strong,{children:"skip-based"})," vs ",(0,o.jsx)(t.strong,{children:"token-based"}),". Of course each backend API dictates how pagination is handled, so if you run into an API that uses a different pagination model, please do create an issue on the GitHub repo and we'll see about adding support for it."]}),"\n",(0,o.jsx)(t.h2,{id:"skip-based",children:"Skip-based"}),"\n",(0,o.jsxs)(t.p,{children:["Skip-based pagination entails requesting a max number of records to return (aka ",(0,o.jsx)(t.em,{children:"limit"}),") in conjunction with a number of records to skip where the backend skips ahead to return that number of records along with metadata about the total number of records available as well as the current skip number."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nconst RECORDS_PER_PAGE = 10;\n\nfunction getProducts(recordSkip = 0) {\n  return callEndpoint('https://dummyjson.com/products', {\n    requestOptions: {\n      // number of records to skip\n      recordSkip,\n      // max number of records to return\n      recordLimit: RECORDS_PER_PAGE,\n    },\n    serverModelOptions: {\n      // query parameter name to use in request URL to represent the desired number of records to skip\n      recordSkipQueryParamName: 'skip',\n      // query parameter name to use in request URL to represent the desired record limit\n      recordLimitQueryParamName: 'limit',\n      // path to the available total number of records property in the API response body\n      jsonTotalDotPath: 'total',\n    },\n  });\n}\n\nconst productsResultPage1 = await getProducts();\n// --\x3e https://dummyjson.com/products?limit=10&skip=0\nconsole.log(productsResultPage1);\n\nif (productsResultPage1.total > RECORDS_PER_PAGE) {\n  const productsResultPage2 = await getProducts(RECORDS_PER_PAGE);\n  // --\x3e https://dummyjson.com/products?limit=10&skip=10\n  console.log(productsResultPage2);\n\n  if (productsResultPage2.total > RECORDS_PER_PAGE * 2) {\n    const productsResultPage3 = await getProducts(RECORDS_PER_PAGE * 2);\n    // --\x3e https://dummyjson.com/products?limit=10&skip=20\n    console.log(productsResultPage3);\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"token-based",children:"Token-based"}),"\n",(0,o.jsxs)(t.p,{children:["Token-based pagination (also referred to as cursor-based) entails requesting a max number of records to return (aka ",(0,o.jsx)(t.em,{children:"limit"}),") where the backend returns that number of records along with a ",(0,o.jsx)(t.em,{children:"token"})," (aka ",(0,o.jsx)(t.em,{children:"cursor"}),") that can be used to request the next set of records."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nfunction getProducts(pageToken = '') {\n  return callEndpoint('https://dummyjson.com/products', {\n    requestOptions: {\n      // pagination token for the request\n      pageToken,\n      // max number of records to return\n      recordLimit: 10,\n    },\n    serverModelOptions: {\n      // query parameter name to use in request URL to represent the desired page token\n      pageTokenQueryParamName: 'pageToken',\n      // query parameter name to use in request URL to represent the desired record limit\n      recordLimitQueryParamName: 'limit',\n      // path to the next page token property in the API response body\n      jsonNextPageTokenDotPath: 'nextPageToken',\n      // path to the previous page token property in the API response body\n      jsonPreviousPageTokenDotPath: 'previousPageToken',\n    },\n  });\n}\n\nconst productsResultPage1 = await getProducts();\n// --\x3e https://dummyjson.com/products?limit=10\nconsole.log(productsResultPage1);\n\nif (productsResultPage1.nextPageToken) {\n  const productsResultPage2 = await getProducts(productsResultPage1.nextPageToken);\n  // --\x3e https://dummyjson.com/products?limit=10&pageToken={productsResultPage1.nextPageToken}\n  console.log(productsResultPage2);\n\n  if (productsResultPage2.nextPageToken) {\n    const productsResultPage3 = await getProducts(productsResultPage2.nextPageToken);\n    // --\x3e https://dummyjson.com/products?limit=10&pageToken={productsResultPage2.nextPageToken}\n    console.log(productsResultPage3);\n  }\n}\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);