"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[3744],{1142:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>f,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=i(7458),s=i(7996),o=i(5207);const r={title:"Runtime Config Reference",pagination_label:"Runtime Config: Reference",pagination_next:"interaction-hooks/getting-started",pagination_prev:"runtime-config/guide-ssr",sidebar_label:"Reference",slug:"/runtime-config/reference"},d="Reference",c={id:"runtime-config/reference",title:"Runtime Config Reference",description:"This reference covers the Runtime Config usage with Typescript (simply ignore all type usage for Vanilla Javascript).",source:"@site/docs/runtime-config/reference.mdx",sourceDirName:"runtime-config",slug:"/runtime-config/reference",permalink:"/spa-tools/runtime-config/reference",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Runtime Config Reference",pagination_label:"Runtime Config: Reference",pagination_next:"interaction-hooks/getting-started",pagination_prev:"runtime-config/guide-ssr",sidebar_label:"Reference",slug:"/runtime-config/reference"},sidebar:"docs",previous:{title:"Runtime Config Guide: SSR",permalink:"/spa-tools/runtime-config/guides/ssr"},next:{title:"Interaction Hooks: Getting Started",permalink:"/spa-tools/interaction-hooks"}},a={},l=[{value:"RuntimeConfig.initialize()",id:"runtimeconfiginitialize",level:2},{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return value",id:"return-value",level:3},{value:"RuntimeConfig.initializeObf()",id:"runtimeconfiginitializeobf",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Return value",id:"return-value-1",level:3},{value:"RuntimeConfig.settings",id:"runtimeconfigsettings",level:2},{value:"RuntimeConfig.hostname",id:"runtimeconfighostname",level:2},{value:"RuntimeConfig.isRunningLocal",id:"runtimeconfigisrunninglocal",level:2},{value:"BaseConfigSettings",id:"baseconfigsettings",level:2},{value:"DomainConfig",id:"domainconfig",level:2},{value:"RuntimeConfigOptions",id:"runtimeconfigoptions",level:2},{value:"Obfuscation (CLI)",id:"obfuscation-cli",level:2},{value:"@spa-tools/runtime-config-obf",id:"spa-toolsruntime-config-obf",level:3},{value:"obfuscate",id:"obfuscate",level:3},{value:"deobfuscate",id:"deobfuscate",level:3},{value:"Obfuscation (NodeJS)",id:"obfuscation-nodejs",level:2},{value:"nodejsObfuscateConfig()",id:"nodejsobfuscateconfig",level:3},{value:"Usage",id:"usage-2",level:4},{value:"nodejsDeobfuscateConfig()",id:"nodejsdeobfuscateconfig",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Obfuscation (Browser)",id:"obfuscation-browser",level:2},{value:"browserObfuscateConfig()",id:"browserobfuscateconfig",level:3},{value:"browserDeobfuscateConfig()",id:"browserdeobfuscateconfig",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.D_,{packageName:"@spa-tools/runtime-config"}),"\n",(0,t.jsx)(n.h1,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(n.p,{children:"This reference covers the Runtime Config usage with Typescript (simply ignore all type usage for Vanilla Javascript)."}),"\n",(0,t.jsxs)(n.p,{children:["Under the hood, ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," is a singleton class that manages initialization and access to your app's runtime configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfiginitialize",children:"RuntimeConfig.initialize()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"initialize<S, E>"})," is a ",(0,t.jsx)(n.em,{children:"static"})," method is used to construct the runtime configuration for your app."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"S"})," type is used to define the shape of your domain-config (i.e. the actual configuration settings you want to use) and must extend the ",(0,t.jsx)(n.a,{href:"#baseconfigsettings",children:(0,t.jsx)(n.code,{children:"BaseConfigSettings"})})," type."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"E"})," is a union type used to define your environment names. If not specified, it will default to ",(0,t.jsx)(n.code,{children:"'development' | 'test' | 'production'"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { BaseConfigSettings, DomainConfig, RuntimeConfig } from '@spa-tools/runtime-config';\n\n// here we define the environment names for our app\ntype MyAppEnvironments = 'dev' | 'uat' | 'live';\n\n// here we define the shape of our app's configuration settings, which\n// can be anything you desire but must extend BaseConfigSettings\ninterface MyAppConfigSettings extends BaseConfigSettings<MyAppEnvironments> {\n  authClientId: string;\n  myAppApiUrl: string;\n}\n\n// here we define the app domain-config, which is just all of the settings\n// across all environments using actual environment domain names as keys\n//\n// note that using the correct domain names is critical for the domain-config\n//\n// if not using TypeScript, simply construct an object with environment-\n// specific domain names as keys and any object desired for each value,\n// just be sure to include an \"environment\" property for each as shown\n// uniquely set to the respective environment name\nconst myAppConfigSet: DomainConfig<MyAppConfigSettings> = {\n  'myapp.dev.com': {\n    environment: 'dev',\n    authClientId: 'auth-client-id-dev',\n    myAppApiUrl: 'https://api.dev.myapp.com',\n  },\n  'myapp.uat.com': {\n    environment: 'uat',\n    authClientId: 'auth-client-id-uat',\n    myAppApiUrl: 'https://api.uat.myapp.com',\n  },\n  'myapp.com': {\n    environment: 'live',\n    authClientId: 'auth-client-id-prod',\n    myAppApiUrl: 'https://api.myapp.com',\n  },\n  // here we define the local development\n  // environment using localhost as the domain\n  localhost: {\n    environment: 'dev',\n    authClientId: 'auth-client-id-dev',\n    myAppApiUrl: 'https://api.dev.myapp.com',\n  },\n};\n\n// here we initialize the runtime config for our app\nexport const myAppRuntimeConfig = RuntimeConfig.initialize<MyAppConfigSettings, MyAppEnvironments>(myAppConfigSet);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domainConfig"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"DomainConfig<S>"})," or ",(0,t.jsx)(n.code,{children:"string"})]}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsxs)(n.td,{children:["The configuration settings for your app. It's either an instance of the ",(0,t.jsx)(n.a,{href:"#domainconfig",children:(0,t.jsx)(n.code,{children:"DomainConfig<S>"})})," type or a serialized ",(0,t.jsx)(n.code,{children:"string"})," equivalent (i.e. stringified JSON)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"options"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RuntimeConfigOptions"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"The options for the runtime config initialization process"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"return-value",children:"Return value"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"initialize"})," method returns a ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," instance."]}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfiginitializeobf",children:"RuntimeConfig.initializeObf()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"initializeObf<S, E>"})," is a ",(0,t.jsx)(n.em,{children:"static"})," method is used to construct the runtime configuration for your app from an obfuscated domain-config string."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"S"})," type is used to define the shape of your domain-config (i.e. the actual configuration settings you want to use) and must extend the ",(0,t.jsx)(n.a,{href:"#baseconfigsettings",children:(0,t.jsx)(n.code,{children:"BaseConfigSettings"})})," type."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"E"})," is a union type used to define your environment names. If not specified, it will default to ",(0,t.jsx)(n.code,{children:"'development' | 'test' | 'production'"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { BaseConfigSettings, DomainConfig, RuntimeConfig } from '@spa-tools/runtime-config';\n// depending on your build setup, you may need to import the file differently\nimport obfuscatedConfigStr from './myapp-config-obf.txt?raw';\n\n// here we define the environment names for our app\ntype MyAppEnvironments = 'dev' | 'uat' | 'live';\n\n// here we define the shape of our app's configuration settings, which\n// can be anything you desire but must extend BaseConfigSettings\ninterface MyAppConfigSettings extends BaseConfigSettings<MyAppEnvironments> {\n  authClientId: string;\n  myAppApiUrl: string;\n}\n\n// since the initialization method for obfuscated config is async, one approach\n// is to export a variable that holds the runtime config instance; this way it\n// can be set after initialization is complete and all imported refs to the config\n// will update accordingly\nexport let myAppRuntimeConfig: RuntimConfig<MyAppConfigSettings, MyAppEnvironments>;\n\n// the initializeObf method is async because of the cryptographic operations\n// involved, so we wrap with our own async function to initialize\nasync function initMyObfuscatedConifg() {\n  // here we initialize using the obfuscated config file and then\n  // assign it to the module-level variable for use throughout the app\n  myAppRuntimeConfig = await RuntimeConfig.initializeObf<MyAppConfigSettings, MyAppEnvironments>(obfuscatedConfigStr);\n\n  console.log('My app runtime config:', myAppRuntimeConfig);\n}\n\n// make it happen\ninitMyObfuscatedConifg();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"obfuscatedConfig"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"The obfuscated domain config"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"options"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RuntimeConfigOptions"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"The options for the runtime config initialization process"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"return-value-1",children:"Return value"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"initializeObf"})," method returns a promise that resolves to a ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," instance."]}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfigsettings",children:"RuntimeConfig.settings"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"settings"})," is an ",(0,t.jsx)(n.em,{children:"instance"})," property of ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," that provides access to runtime configuration for the active environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// we can access our app's configuration object via the settings\n// property and the correct environment settings will be returned\n// based on the hostname that is present in the user's browser URL\nconsole.log(\n  `App API URL for ${myAppRuntimeConfig.settings.environment} env is ${myAppRuntimeConfig.settings.myAppApiUrl}`\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfighostname",children:"RuntimeConfig.hostname"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"hostname"})," is an ",(0,t.jsx)(n.em,{children:"instance"})," property of ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," that returns the active hostname that is driving\nthe runtime config's current settings."]}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfigisrunninglocal",children:"RuntimeConfig.isRunningLocal"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"isRunningLocal"})," is an ",(0,t.jsx)(n.em,{children:"instance"})," property of ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," that returns a boolean indicating whether\nthe runtime config is running in a local development environment."]}),"\n",(0,t.jsx)(n.h2,{id:"baseconfigsettings",children:"BaseConfigSettings"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"BaseConfigSettings<E>"})," is the base interface that all config-sets must extend."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"E"})," is a ",(0,t.jsx)(n.code,{children:"string"})," union type used to define environment names, defaulting to\n",(0,t.jsx)(n.code,{children:"'development' | 'test' | 'production'"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"environment"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"E"})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Indicates the environment that respective config settings belong to."})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"domainconfig",children:"DomainConfig"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DomainConfig<S>"})," is a ",(0,t.jsx)(n.code,{children:"Record<string, S>"})," type that represents a complete domain-config for all environments\nwhere the ",(0,t.jsx)(n.code,{children:"string"})," key is the respective environment hostname (i.e. domain)."]}),"\n",(0,t.jsxs)(n.p,{children:["The generic ",(0,t.jsx)(n.code,{children:"S"})," is the shape of the configuration settings and must extend the\n",(0,t.jsx)(n.a,{href:"#baseconfigsettings",children:(0,t.jsx)(n.code,{children:"BaseConfigSettings"})})," type."]}),"\n",(0,t.jsx)(n.h2,{id:"runtimeconfigoptions",children:"RuntimeConfigOptions"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"RuntimeConfigOptions"})," is an interface that defines the options for the runtime config initialization process."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"locahostIpAddress"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'127.0.0.1'"})}),(0,t.jsx)(n.td,{children:"The IP address to use to detect the local development environment."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"manualActiveHostname"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"''"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)("p",{children:"The hostname to use to manually set the active config environment."}),(0,t.jsx)("p",{children:"This only needs to be specified when running in a non-browser environment (i.e. SSR)"})]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"obfuscation-cli",children:"Obfuscation (CLI)"}),"\n",(0,t.jsx)(n.h3,{id:"spa-toolsruntime-config-obf",children:"@spa-tools/runtime-config-obf"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@spa-tools/runtime-config-obf"})," CLI command is used to obfuscate and deobfuscate your app's runtime configuration settings."]}),"\n",(0,t.jsxs)(n.p,{children:["For obfuscation usage scenario and reasoning, see the ",(0,t.jsx)(n.a,{href:"/spa-tools/runtime-config/guides/obfuscation",children:"Obfuscation Guide"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"obf"})," or ",(0,t.jsx)(n.code,{children:"deobf"})]}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsxs)(n.td,{children:["The command to run (",(0,t.jsx)(n.code,{children:"obf"})," = obfuscate and ",(0,t.jsx)(n.code,{children:"deobf"})," = deobfuscate)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"input"})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"The path to the input file"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"output"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"The path to the output file. If not specified, then the resulting config (obfuscated or deobfuscated) will be output to the console"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"obfuscate",children:"obfuscate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npx @spa-tools/runtime-config-obf obf ./path/to/static-config.json ./path/to/obfuscated-config.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deobfuscate",children:"deobfuscate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npx @spa-tools/runtime-config-obf deobf ./path/to/obfuscated-config.txt ./path/to/static-config.json\n"})}),"\n",(0,t.jsx)(n.h2,{id:"obfuscation-nodejs",children:"Obfuscation (NodeJS)"}),"\n",(0,t.jsxs)(n.p,{children:["For obfuscation usage scenario and reasoning, see the ",(0,t.jsx)(n.a,{href:"/spa-tools/runtime-config/guides/obfuscation",children:"Obfuscation Guide"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"nodejsobfuscateconfig",children:"nodejsObfuscateConfig()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"nodejsObfuscateConfig"})," function is used to obfuscate a domain-config within a NodeJS program; it returns the obfuscated config as a string and optionally outputs it to a file."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domainConfig"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#domainconfig",children:(0,t.jsx)(n.code,{children:"DomainConfig"})})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"A RuntimeConfig domain-config"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"outputPath"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"The path to the output file"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { nodejsObfuscateConfig } from '@spa-tools/runtime-config';\nimport { myAppConfig } from './myapp-config';\n\nconst obfuscatedConfig = nodejsObfuscateConfig(myAppConfig, './path/to/obfuscated-config.txt');\nconsole.log('Obfuscated config:');\nconsole.log(obfuscatedConfig);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nodejsdeobfuscateconfig",children:"nodejsDeobfuscateConfig()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"nodejsDeobfuscateConfig"})," function is used to deobfuscate a domain-config within a NodeJS program; it returns the deobfuscated config as a ",(0,t.jsx)(n.a,{href:"#domainconfig",children:(0,t.jsx)(n.code,{children:"DomainConfig"})})," and optionally outputs it to a file."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"obfuscatedConfig"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"The obfuscated config string"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"outputPath"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"The path to the output file"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { nodejsDeobfuscateConfig } from '@spa-tools/runtime-config';\n\nconst deobfuscatedConfig = nodejsDeobfuscateConfig(obfuscatedConfig, './path/to/static-config.json');\nconsole.log('Deobfuscated config:', deobfuscatedConfig);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"obfuscation-browser",children:"Obfuscation (Browser)"}),"\n",(0,t.jsx)(n.p,{children:"This browser-obfuscation reference is for information only. There should never be a reason to use these functions in a real-world SPA because:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Obfuscation only makes sense during build time and not at runtime"}),"\n",(0,t.jsxs)(n.li,{children:["Deobfuscation is handled automatically at runtime in your SPA by the ",(0,t.jsx)(n.code,{children:"RuntimeConfig"})," class"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Regardless, these functions are exported (for use in the Live Demo) and thus are covered here."}),"\n",(0,t.jsx)(n.h3,{id:"browserobfuscateconfig",children:"browserObfuscateConfig()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"browserObfuscateConfig"})," function is used to obfuscate a domain-config within a browser environment; it returns the obfuscated config as a string."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domainConfig"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#domainconfig",children:(0,t.jsx)(n.code,{children:"DomainConfig"})})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"A RuntimeConfig domain-config"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"browserdeobfuscateconfig",children:"browserDeobfuscateConfig()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"browserDeobfuscateConfig"})," function is used to deobfuscate a domain-config within a browser environment; it returns the deobfuscated config as a ",(0,t.jsx)(n.a,{href:"#domainconfig",children:(0,t.jsx)(n.code,{children:"DomainConfig"})}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required?"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Comments"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"obfuscatedConfig"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"The obfuscated config string"})]})})]})]})}function f(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);