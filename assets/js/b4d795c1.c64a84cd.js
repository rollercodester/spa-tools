"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[4113],{4698:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var s=n(7458),a=n(7996),o=n(5207);const i={title:"Result Mapping",pagination_label:"API Client Guide: Result Mapping",pagination_next:"api-client/guide-pagination",pagination_prev:"api-client/guide-state-interpolation",sidebar_label:"Result Mapping",slug:"/api-client/guides/result-mapping"},r="Result Mapping",p={id:"api-client/guide-result-mapping",title:"Result Mapping",description:"It's not uncommon for backend APIs to have a wide variety of response model patterns and approaches; even those managed by a single team can fall prey to inconsistencies.",source:"@site/docs/api-client/guide-result-mapping.mdx",sourceDirName:"api-client",slug:"/api-client/guides/result-mapping",permalink:"/spa-tools/api-client/guides/result-mapping",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Result Mapping",pagination_label:"API Client Guide: Result Mapping",pagination_next:"api-client/guide-pagination",pagination_prev:"api-client/guide-state-interpolation",sidebar_label:"Result Mapping",slug:"/api-client/guides/result-mapping"},sidebar:"docs",previous:{title:"API Client Guide: State Interpolation",permalink:"/spa-tools/api-client/guides/state-interpolation"},next:{title:"API Client Guide: Pagination",permalink:"/spa-tools/api-client/guides/pagination"}},l={},c=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,s.jsx)(t.h1,{id:"result-mapping",children:"Result Mapping"}),"\n",(0,s.jsx)(t.p,{children:"It's not uncommon for backend APIs to have a wide variety of response model patterns and approaches; even those managed by a single team can fall prey to inconsistencies.\nThe reasons for this aren't a concern here, only that it is a reality that frontend developers have to contend with."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"@spa-tools/api-client"})," makes dealing with backend model-madness as painless as possible by always keeping the frontend result envelope standard and\nconsistent. Specifically, the API Client always returns a response object containing a ",(0,s.jsx)("em",{children:"data"})," property for data and an ",(0,s.jsx)("em",{children:"error"})," property for errors."]}),"\n",(0,s.jsx)(t.p,{children:"This gives you prescriptive power to ensure data consistency in frontend code, regardless of how nutso backend response models can become."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nconst groceriesResult = await callEndpoint(\n  'https://dummyjson.com/products/category/:category',\n  // since we're requesting to use \"products\" as the jsonDataDotPath, the\n  // API Client will deserialize the endpoint response body and then take the\n  // respective \"products\" property and return it in the result's data property\n  { serverModelOptions: { jsonDataDotPath: 'products' } },\n  { category: 'groceries' }\n);\nconsole.log(groceriesResult.data); // --\x3e response.body.products\n\n// conversely, if we do NOT specify a jsonDataDotPath, the API Client\n// will retain the backend response body and assign it directly to the\n// result's data property\nconst laptopsResult = await callEndpoint('https://dummyjson.com/products/category/:category', {\n  category: 'laptops',\n});\nconsole.log(groceriesResult.data); // --\x3e response.body\n\nconst errorResult = await callEndpoint('https://dummyjson.com/http/500/Example%20api%20error', {\n  // we can also set the dot path for the result's error property, which is nice\n  // for backends that implement custom app error envelopes\n  //\n  // for example, here we're setting the jsonErrorDotPath to \"message\" so that\n  // the API Client will return the response.body.message value in the result's\n  // error property for any error responses\n  serverModelOptions: { jsonErrorDotPath: 'message' },\n});\nconsole.error('500 error:', result?.error); // --\x3e response.body.message\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);