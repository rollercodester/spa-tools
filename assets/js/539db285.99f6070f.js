"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[8230],{9559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var i=n(7458),s=n(7996),a=n(5207);const l={title:"deepClone",pagination_label:"Data Utilities: deepClone",pagination_next:"utilities/data/deep-equal",pagination_prev:"utilities/data/bytes-to-base64",sidebar_label:"deepClone",slug:"/utilities/data/deep-clone"},o="deepClone()",d={id:"utilities/data/deep-clone",title:"deepClone",description:"The ES6 spread ... operator was a huge game changer when it was released. And",source:"@site/docs/utilities/data/deep-clone.mdx",sourceDirName:"utilities/data",slug:"/utilities/data/deep-clone",permalink:"/spa-tools/utilities/data/deep-clone",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"deepClone",pagination_label:"Data Utilities: deepClone",pagination_next:"utilities/data/deep-equal",pagination_prev:"utilities/data/bytes-to-base64",sidebar_label:"deepClone",slug:"/utilities/data/deep-clone"},sidebar:"docs",previous:{title:"Date Utilities: bytesToBase64",permalink:"/spa-tools/utilities/data/bytes-to-base64"},next:{title:"Data Utilities: deepEqual",permalink:"/spa-tools/utilities/data/deep-equal"}},r={},c=[{value:"Usage",id:"usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3}];function h(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,i.jsx)(t.h1,{id:"deepclone",children:"deepClone()"}),"\n",(0,i.jsxs)(t.p,{children:["The ES6 spread ",(0,i.jsx)(t.code,{children:"..."})," operator was a huge game changer when it was released. And\nfor simple object/array copies, it's the go-to choice. But as powerful as it is,\nit falls short for copying objects or arrays that hold\nnested reference values."]}),"\n",(0,i.jsxs)(t.p,{children:["This is where the ",(0,i.jsx)(t.code,{children:"deepClone<T>()"})," function comes in. It's a simple utility that allows you to\ndeeply clone an object or array, including nested reference values."]}),"\n",(0,i.jsxs)(t.p,{children:["The generic ",(0,i.jsx)(t.code,{children:"T"})," type is used to define the type of data being cloned."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { deepClone } from '@spa-tools/utilities';\n\nconst original = {\n  address: {\n    city: 'New York',\n    country: 'USA'\n  },\n  hobbies: ['reading', 'coding'],\n  name: 'John'\n  children: [\n    { name: 'Alice',\n      attributes: { age: 10, eyeColor: 'blue', hairColor: 'brown' }\n    },\n    { name: 'Sam',\n      attributes: { age: 8, eyeColor: 'green', hairColor: 'blonde'}\n    },\n  ]\n};\n\nconst cloned = deepClone(original);\n\nconsole.log(cloned);\nconsole.log(cloned === original);\n// --\x3e false\nconsole.log(cloned.children[0] === original.children[0]);\n// --\x3e false\nconsole.log(cloned.children[0].attributes === original.children[0].attributes);\n// --\x3e false\n"})}),"\n",(0,i.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"value"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"T"})}),(0,i.jsx)(t.td,{children:"The data to clone"})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"T"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);