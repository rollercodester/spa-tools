"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[4787],{7017:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=n(7458),i=n(7996),l=n(5207);const s={title:"Throttling",pagination_label:"API Client Guide: Throttling",pagination_next:"api-client/guide-caching",pagination_prev:"api-client/getting-started",sidebar_label:"Throttling",slug:"/api-client/guides/throttling"},a="Throttling",r={id:"api-client/guide-throttling",title:"Throttling",description:"Throttling is crucial to backend APIs for traffic control, but what about throttling on the frontend? And why should you even consider it?",source:"@site/docs/api-client/guide-throttling.mdx",sourceDirName:"api-client",slug:"/api-client/guides/throttling",permalink:"/spa-tools/api-client/guides/throttling",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Throttling",pagination_label:"API Client Guide: Throttling",pagination_next:"api-client/guide-caching",pagination_prev:"api-client/getting-started",sidebar_label:"Throttling",slug:"/api-client/guides/throttling"},sidebar:"docs",previous:{title:"API Client: Getting Started",permalink:"/spa-tools/api-client"},next:{title:"API Client Guide: Caching",permalink:"/spa-tools/api-client/guides/caching"}},h={},c=[];function d(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,o.jsx)(e.h1,{id:"throttling",children:"Throttling"}),"\n",(0,o.jsx)(e.p,{children:"Throttling is crucial to backend APIs for traffic control, but what about throttling on the frontend? And why should you even consider it?"}),"\n",(0,o.jsx)(e.p,{children:"In modern Web UIs, calls to backends comingle with interaction flows to the point of even hooking into render logic. Thus, frontends should be cognizant of the possibility and even the probability of erroneous, duplicate API requests being made, especially considering the complexities of today's render frameworks."}),"\n",(0,o.jsxs)(e.p,{children:["To address this concern, the ",(0,o.jsx)(e.code,{children:"@spa-tools/api-client"})," package includes a built-in throttling mechanism to help you manage how often a particular request can be made to the server from your SPA."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nasync function getAlbumPhotos(albumId: number) {\n  const result = await callEndpoint(\n    'https://jsonplaceholder.typicode.com/albums/:albumId/photos',\n    // pass in an options object to configure the throttle settings\n    {\n      consoleOptions: {\n        // turn console logging ON for throttle hits so we can\n        // easily see every time a request is throttled, which\n        // is useful for debugging and understanding how the\n        // throttle is working; however, it's advised to keep\n        // this turned off in production environments\n        logThrottleCacheHits: true,\n        //\n        // set the threshold for the number of throttles that can\n        // occur within the configured TTL before an error-warning\n        // is logged to the console\n        //\n        // the real-world goal here is to use this error-warning as\n        // a bug indicator to know when your app is making too many\n        // dupe requests. The threshold is of course dependent on\n        // how data calls are made in conjunction with your render\n        // logic. For example, a React app that makes data requests\n        // via useEffect hooks can easily result in unexpected dupe\n        // calls that are par for the course, so a higher threshold\n        // setting would make sense in that scenario.\n        logThrottleWarningsThreshold: 3,\n      },\n      frequencyOptions: {\n        // set the frequency strategy to throttle\n        frequencyStrategy: 'throttle',\n        // set the time-to-live for the throttle (in ms), meaning\n        // a dupe call will be allowed after this time has passed\n        frequencyStrategyTTL: 300,\n      },\n    },\n    // set state object to interpolate path parameter value\n    { albumId }\n  );\n\n  if (!result) {\n    // this means call was throttled\n    return;\n  }\n\n  console.log(`Photos for album with ID \"${albumId}\":`);\n  console.log(result?.data);\n}\n\n// first two calls are distinct and will be made to the API endpoint\ngetAlbumPhotos(1);\ngetAlbumPhotos(8);\n// following three calls will be throttled (no more calls will be\n// made to the API endpoint)\ngetAlbumPhotos(8);\ngetAlbumPhotos(8);\n// this call will cross the configured throttle warning threshold\n// so an error-warning will be logged\ngetAlbumPhotos(8);\n\nsetTimeout(() => {\n  // the throttle will reset after 300ms so this call will be made\n  getAlbumPhotos(8);\n}, 350);\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}}}]);