"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[0],{6734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>r});var a=t(7458),i=t(7996),s=t(5207);const l={title:"Appending Data (React)",pagination_label:"API Client Guide: Appending Data (React)",pagination_next:"api-client/reference-vanilla",pagination_prev:"api-client/guide-pagination",sidebar_label:"Appending Data (React)",slug:"/api-client/guides/react-append-data"},o="Appending React Data",c={id:"api-client/guide-react-append-data",title:"Appending Data (React)",description:'If you\'re using the @spa-tools/api-client to build a React application and your design calls for cumulative loading of data (e.g. "load more", "infinite scroll", etc.), the useCallEndpoint hook has an append feature that will help you implement your solution with such ease and head-spinning speed that you\'ll be demo\'ing in a matter of minutes.',source:"@site/docs/api-client/guide-react-append-data.mdx",sourceDirName:"api-client",slug:"/api-client/guides/react-append-data",permalink:"/spa-tools/api-client/guides/react-append-data",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Appending Data (React)",pagination_label:"API Client Guide: Appending Data (React)",pagination_next:"api-client/reference-vanilla",pagination_prev:"api-client/guide-pagination",sidebar_label:"Appending Data (React)",slug:"/api-client/guides/react-append-data"},sidebar:"docs",previous:{title:"API Client Guide: Pagination",permalink:"/spa-tools/api-client/guides/pagination"},next:{title:"API Client: Vanilla Reference",permalink:"/spa-tools/api-client/reference/vanilla"}},p={},r=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,a.jsx)(n.h1,{id:"appending-react-data",children:"Appending React Data"}),"\n",(0,a.jsxs)(n.p,{children:["If you're using the ",(0,a.jsx)(n.code,{children:"@spa-tools/api-client"}),' to build a React application and your design calls for cumulative loading of data (e.g. "load more", "infinite scroll", etc.), the ',(0,a.jsx)(n.code,{children:"useCallEndpoint"})," hook has an append feature that will help you implement your solution with such ease and head-spinning speed that you'll be demo'ing in a matter of minutes."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Bonus:"})," If you need to implement infinite scroll, be sure to also check out the ",(0,a.jsx)(n.code,{children:"useInfiniteScroll"})," hook in the ",(0,a.jsx)(n.code,{children:"@spa-tools/interaction-hooks"})," package!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { useEffect, useState } from 'react';\nimport { useCallEndpoint } from '@spa-tools/api-client';\n\nconst RECIPE_RECORD_LIMIT = 10;\n\n// this is a simple hook wrapper making it specific to the \"recipes\" endpoint\nfunction useGetRecipes() {\n  return useCallEndpoint(\n    'https://dummyjson.com/recipes',\n    {\n      requestOptions: { recordLimit: RECIPE_RECORD_LIMIT },\n      serverModelOptions: { jsonDataDotPath: 'recipes' },\n    },\n    // passing in true here tells the hook to append\n    // all successive paginated data to the result\n    true\n  );\n}\n\nfunction LoadMoreRecipes() {\n  const [loadRecipes, recipesResult, areRecipesLoading, clearRecipes] = useGetRecipes();\n  const [totalRecipes, setTotalRecipes] = useState(0);\n\n  useEffect(() => {\n    const callNum = recipesResult && recipesResult.data ? recipesResult.data.length / RECIPE_RECORD_LIMIT : 0;\n\n    if (recipesResult?.data && !areRecipesLoading) {\n      setTotalRecipes(recipesResult.total ?? 0);\n      console.log(`loadRecipes call #${callNum} completed:`);\n      console.log(recipesResult.data);\n    } else if (recipesResult?.error) {\n      console.error(`loadRecipes call #${callNum} errored:`);\n      console.error(recipesResult.error);\n    } else if (areRecipesLoading) {\n      console.log(`loadRecipes call #${callNum + 1} in-progress`);\n    }\n  }, [areRecipesLoading, recipesResult]);\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <div>\n        <button disabled={recipesResult?.data?.length ?? -1 === totalRecipes} onClick={loadRecipes}>\n          Load More Recipes\n        </button>\n        <button disabled={!!recipesResult?.data?.length} onClick={clearRecipes}>\n          Clear Recipes\n        </button>\n      </div>\n      <div>\n        {recipesResult?.data?.length\n          ? `${recipesResult.data.length} of ${totalRecipes} have been loaded!`\n          : 'No recipes loaded, yet'}\n      </div>\n    </div>\n  );\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);