"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[2066],{9001:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=o(7458),a=o(7996),r=o(5207);const s={title:"Hash Autoscroll",pagination_label:"Core Router Guide: Hash Autoscroll",pagination_next:"core-router/reference-vanilla",pagination_prev:"core-router/guide-fallback-route",sidebar_label:"Hash Autoscroll",slug:"/core-router/guides/hash-autoscroll"},i="Hash Autoscroll",l={id:"core-router/guide-hash-autoscroll",title:"Hash Autoscroll",description:"Using URL hashes to scroll to content has been around a long time, but this native",source:"@site/docs/core-router/guide-hash-autoscroll.mdx",sourceDirName:"core-router",slug:"/core-router/guides/hash-autoscroll",permalink:"/spa-tools/core-router/guides/hash-autoscroll",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Hash Autoscroll",pagination_label:"Core Router Guide: Hash Autoscroll",pagination_next:"core-router/reference-vanilla",pagination_prev:"core-router/guide-fallback-route",sidebar_label:"Hash Autoscroll",slug:"/core-router/guides/hash-autoscroll"},sidebar:"docs",previous:{title:"Core Router Guide: Fallback Route",permalink:"/spa-tools/core-router/guides/fallback-route"},next:{title:"Core Router: Vanilla Reference",permalink:"/spa-tools/core-router/reference/vanilla"}},c={},u=[];function h(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.D_,{packageName:"@spa-tools/core-router"}),"\n",(0,n.jsx)(t.h1,{id:"hash-autoscroll",children:"Hash Autoscroll"}),"\n",(0,n.jsx)(t.p,{children:"Using URL hashes to scroll to content has been around a long time, but this native\nfunctionality can get ugly and convoluted when implemented in a SPA, especially when\nyou're trying to scroll to a specific element right after a view loads."}),"\n",(0,n.jsxs)(t.p,{children:["While the ",(0,n.jsx)(t.code,{children:"@spa-tools/core-router"})," typically stays out of the UI rendering/interaction\nbusiness, this is one scenario it dives head first into to enable simple auto-scroll\nto html elements via its navigation feature."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import { CoreRouter, routesFactory } from '@spa-tools/core-router';\n\nconst createMyRoutes = routesFactory();\n\n// here we create two routes where we will \"pretend\" that the About\n// route has a \"Careers\" section that we want to auto-scroll to\nconst myRoutes = createMyRoutes({\n  homeRoute: {\n    path: '/',\n  },\n  aboutRoute: {\n    path: '/about',\n    // here we specify that for this route we'd like any auto-scrolling\n    // via hash navigation to be smooth; we could omit this and the\n    // behavior would default to 'auto' or we could also set it to 'instant'\n    hashScrollBehavior: 'smooth',\n  },\n});\n\n// here we create a new instance of the CoreRouter class and pass in\n// our routes object; we also pass in an object that implements the\n// router lifecycle callback onRouteChange so we can log outcomes\nconst myRouter = CoreRouter.initialize(myRoutes, {\n  onRouteChange: (routeChange) => {\n    // this is where we would perform any post-processing logic, which\n    // typically means rendering the requested route. How to do this\n    // ranges based on the UI framework being used, so here we simply\n    // log path info to the console.\n    //\n    // If you're using React or want to create an abstraction for a\n    // different rendering package/framework, you should definitely\n    // check out the Core React Router abstraction, which has the\n    // rendering logic sweetly baked in.\n    console.log(\n      `Route change with hash in path: ${window.location.pathname + window.location.search + window.location.hash}`\n    );\n  },\n});\n\n// first, we navigate to the home route\nmyRouter.navigate(myRoutes.homeRoute);\n\n// next, we navigate to the about route and specify a hash so the\n// browser will auto-scroll to the Careers section, if it exists.\n// And by exists, we mean that the rendered content must have a\n// DOM element with the ID of \"careers\".\n//\n// And that's it. Easy-peasy. Pretty cool, huh?!?!\nmyRouter.navigate(myRoutes.aboutRoute, undefined, 'careers');\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);