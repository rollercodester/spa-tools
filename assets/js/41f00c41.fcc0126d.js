"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[6824],{9391:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var s=i(7458),o=i(7996),n=i(5207);const l={title:"isNotEmptyRecord",pagination_label:"Conditional Utilities: isNotEmptyRecord",pagination_next:"utilities/conditionals/is-past",pagination_prev:"utilities/conditionals/is-leap-year",sidebar_label:"isNotEmptyRecord",slug:"/utilities/conditionals/is-not-empty-record"},r="isNotEmptyRecord()",c={id:"utilities/conditionals/is-not-empty-record",title:"isNotEmptyRecord",description:"It's a common use case to check if a value is a valid plain object (aka Record)",source:"@site/docs/utilities/conditionals/is-not-empty-record.mdx",sourceDirName:"utilities/conditionals",slug:"/utilities/conditionals/is-not-empty-record",permalink:"/spa-tools/utilities/conditionals/is-not-empty-record",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"isNotEmptyRecord",pagination_label:"Conditional Utilities: isNotEmptyRecord",pagination_next:"utilities/conditionals/is-past",pagination_prev:"utilities/conditionals/is-leap-year",sidebar_label:"isNotEmptyRecord",slug:"/utilities/conditionals/is-not-empty-record"},sidebar:"docs",previous:{title:"Conditional Utilities: isLeapYear",permalink:"/spa-tools/utilities/conditionals/is-leap-year"},next:{title:"Conditional Utilities: isPast",permalink:"/spa-tools/utilities/conditionals/is-past"}},d={},a=[{value:"Usage",id:"usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3}];function p(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,s.jsx)(t.h1,{id:"isnotemptyrecord",children:"isNotEmptyRecord()"}),"\n",(0,s.jsxs)(t.p,{children:["It's a common use case to check if a value is a valid plain object (aka ",(0,s.jsx)(t.code,{children:"Record"}),")\nbut often you will also need to check to see if the object is empty."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"isNotEmptyRecord()"})," foots the bill by returning ",(0,s.jsx)(t.code,{children:"true"})," or ",(0,s.jsx)(t.code,{children:"false"})," when the\nvalue is a valid ",(0,s.jsx)(t.code,{children:"Record"})," (non-empty vs empty, respectively) but conversely\nreturns ",(0,s.jsx)(t.code,{children:"null"})," when it's not a valid ",(0,s.jsx)(t.code,{children:"Record"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { isNotEmptyRecord } from '@spa-tools/utilities';\n\nconst nonEmptyRecord = { baz: 123, foo: 'bar' };\nconst emptyRecord = {};\nconst notARecord = ['foo'];\n\nconsole.log(isNotEmptyRecord(nonEmptyRecord));\n// -> true\nconsole.log(isNotEmptyRecord(emptyRecord));\n// -> false\nconsole.log(isNotEmptyRecord(notARecord));\n// -> null\n"})}),"\n",(0,s.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Required?"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"value"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"unkown"})}),(0,s.jsx)(t.td,{children:"yes"}),(0,s.jsx)(t.td,{children:"-"}),(0,s.jsx)(t.td,{children:"The value to check"})]})})]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"boolean"})," or ",(0,s.jsx)(t.code,{children:"null"})," - If valid ",(0,s.jsx)(t.code,{children:"Record"})," object then returns ",(0,s.jsx)(t.code,{children:"true"})," if not-empty\nand ",(0,s.jsx)(t.code,{children:"false"})," if empty; otherwise, returns ",(0,s.jsx)(t.code,{children:"null"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);