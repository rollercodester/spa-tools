"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[1857],{4877:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7458),s=r(7996),d=r(5207);const o={title:"Valilla JS Reference",pagination_label:"Core Router: Vanilla Reference",pagination_next:"core-router/reference-react",pagination_prev:"core-router/guide-hash-autoscroll",sidebar_label:"Vanilla",slug:"/core-router/reference/vanilla"},i="Vanilla Reference",c={id:"core-router/reference-vanilla",title:"Valilla JS Reference",description:"The Core Router is designed to be framework agnostic and can be used with any JavaScript",source:"@site/docs/core-router/reference-vanilla.mdx",sourceDirName:"core-router",slug:"/core-router/reference/vanilla",permalink:"/spa-tools/core-router/reference/vanilla",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Valilla JS Reference",pagination_label:"Core Router: Vanilla Reference",pagination_next:"core-router/reference-react",pagination_prev:"core-router/guide-hash-autoscroll",sidebar_label:"Vanilla",slug:"/core-router/reference/vanilla"},sidebar:"docs",previous:{title:"Core Router Guide: Hash Autoscroll",permalink:"/spa-tools/core-router/guides/hash-autoscroll"},next:{title:"Core Router: React Reference",permalink:"/spa-tools/core-router/reference/react"}},h={},l=[{value:"routesFactory()",id:"routesfactory",level:2},{value:"Usage",id:"usage",level:3},{value:"CoreRouter",id:"corerouter",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Constructor",id:"constructor",level:3},{value:"navigate()",id:"navigate",level:3},{value:"CoreRouterOptions",id:"corerouteroptions",level:2},{value:"Usage",id:"usage-2",level:3},{value:"Properties",id:"properties",level:3},{value:"CoreRoute",id:"coreroute",level:2},{value:"CoreRouteChangePayload",id:"coreroutechangepayload",level:2},{value:"CoreRouteRequestPayload",id:"corerouterequestpayload",level:2},{value:"CoreRouteResponse",id:"corerouteresponse",level:2},{value:"OnCoreRouteChange",id:"oncoreroutechange",level:2},{value:"OnCoreRouteRequest",id:"oncorerouterequest",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(d.D_,{packageName:"@spa-tools/core-router"}),"\n",(0,n.jsx)(t.h1,{id:"vanilla-reference",children:"Vanilla Reference"}),"\n",(0,n.jsx)(t.p,{children:"The Core Router is designed to be framework agnostic and can be used with any JavaScript\nlibrary. This reference will cover the usage of the Core Router with\nTypescript but works for Javascript as well (simply ignore all type usage)."}),"\n",(0,n.jsx)(t.h2,{id:"routesfactory",children:"routesFactory()"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"routesFactory<R>"})," function returns a factory method, which when called transforms route\ndefinitions into a ",(0,n.jsx)(t.em,{children:"routes"})," object. The resulting routes object is what you use in your app whenever\nyou need to provide routes to a Core Router or when you need to specify a route for navigation."]}),"\n",(0,n.jsxs)(t.p,{children:["The generic ",(0,n.jsx)(t.code,{children:"R"})," type is used to define the shape of the route that will be created and must\nextend the default ",(0,n.jsx)(t.a,{href:"#coreroute",children:(0,n.jsx)(t.code,{children:"CoreRoute"})})," type."]}),"\n",(0,n.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { CoreRoute, routesFactory } from '@spa-tools/core-router';\n\n// adding custom properties to your routes is as simple\n// as creating an interface that extends CoreRoute\ninterface MyCustomRoute extends CoreRoute {\n  requiresAuth: boolean;\n}\n\n// to create your routes, first generate a route factory method\nconst createMyRoutes = routesFactory<MyCustomRoute>();\n\n// next define and create all of your routes, which you'll\n// typically export to use throughout your app\nexport const myRoutes = createMyRoutes({\n  dashboardRoute: {\n    path: '/',\n    requiresAuth: true,\n  },\n  financialsRoute: {\n    path: '/financials',\n    requiresAuth: true,\n  },\n  loginRoute: {\n    path: '/login',\n    requiresAuth: false,\n  },\n  signupRoute: {\n    path: '/signup',\n    requiresAuth: false,\n  },\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"corerouter",children:"CoreRouter"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"CoreRouter"})," class is used to create a new instance of a Core Router which is where all of the routing logic is encapsulated."]}),"\n",(0,n.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { CoreRouter } from '@spa-tools/core-router';\n\nconst myRouter = CoreRouter.initialize(myRoutes, myOptions);\n\nmyRouter.navigate(myRoutes.dashboardRoute);\n"})}),"\n",(0,n.jsx)(t.h3,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"routes"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, R>"})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsxs)(t.td,{children:["The routes are created using a factory method generated via ",(0,n.jsx)(t.a,{href:"#routesfactory",children:(0,n.jsx)(t.code,{children:"routesFactory"})}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"options"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#corerouteroptions",children:(0,n.jsx)(t.code,{children:"CoreRouterOptions"})})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsxs)(t.td,{children:["See the ",(0,n.jsx)(t.a,{href:"#corerouteroptions",children:"Options"})," section for details."]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"navigate",children:"navigate()"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"navigate"})," method is used to navigate to a new route."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"route"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"R"})," or ",(0,n.jsx)(t.code,{children:"string"})]}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsxs)(t.td,{children:["Must be ",(0,n.jsx)(t.em,{children:"EITHER"})," one of the routes that were created using the factory method generated via ",(0,n.jsx)(t.a,{href:"#routesfactory",children:(0,n.jsx)(t.code,{children:"routesFactory"})})," ",(0,n.jsx)(t.em,{children:"OR"})," the respective route's path."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"state"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, unknown>"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The state to be passed to the new route."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"hash"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"string"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The hash to be passed to the new route, which will trigger an auto-scroll after navigation on target element if one exists."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"corerouteroptions",children:"CoreRouterOptions"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"CoreRouterOptions"})," type is used to define the options that can be passed to the ",(0,n.jsx)(t.code,{children:"CoreRouter"})," constructor."]}),"\n",(0,n.jsx)(t.h3,{id:"usage-2",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { CoreRouterOptions } from '@spa-tools/core-router';\n\nconst myOptions: CoreRouterOptions<MyCustomRoute> = {\n  basePath: '/app',\n  fallbackRoute: myRoutes.dashboardRoute,\n  fallbackState: { error: '404' },\n  onRouteChange: (route, state) => {\n    console.log('Route changed to:', route, 'with state:', state);\n  },\n  onRouteRequest: (newRoute, newState) => {\n    console.log('Route requested:', newRoute, 'with state:', newState);\n  },\n};\n"})}),"\n",(0,n.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"basePath"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"string"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsxs)(t.td,{children:["Used to build the full URL for each route. An example of a base path is ",(0,n.jsx)(t.code,{children:"/app"})," which would be used to build the full URL for a route with a path of ",(0,n.jsx)(t.code,{children:"/home"})," as ",(0,n.jsx)(t.code,{children:"/app/home"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"fallbackRoute"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"R"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Route to use when no route is matched."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"fallbackState"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, unknown>"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"State to use when no route is matched."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"onRouteChange"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#oncoreroutechange",children:(0,n.jsx)(t.code,{children:"OnCoreRouteChange<R>"})})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Callback that is invoked when a route change has been processed."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"onRouteRequest"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#oncorerouterequest",children:(0,n.jsx)(t.code,{children:"OnCoreRouteRequest<R>"})})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Callback that is invoked when a route change request is pending and ready to act on."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"coreroute",children:"CoreRoute"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CoreRoute"})," is the base type that all Core Router routes must extend."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"hashScrollBehavior"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"ScrollBehavior"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Determines the scroll behavior when hash links are auto-srolled on route navigation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"path"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"string"})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The route's path, relative to the app's base path."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"addUnusedStateToQueryString"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"boolean"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsxs)(t.td,{children:["If ",(0,n.jsx)(t.code,{children:"true"}),", any state that is not used to interpolate URL path params will be added to the query string."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"preEncodeQueryStringValues"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"string[]"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{children:"The querystring values for all keys provided will be pre-encoded, which in effect applies double-encoding. Example for use is if you have to pass file paths in a querystring and the consuming service requires it to be double URI encoded."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"removeUnusedQueryParams"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"boolean"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsxs)(t.td,{children:["If ",(0,n.jsx)(t.code,{children:"true"}),", any query string placeholders that are not used to interpolate the URL will be removed from path (i.e. discard orhpaned placeholders)."]})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"coreroutechangepayload",children:"CoreRouteChangePayload"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CoreRouteChangePayload<R>"})," is the object that is passed to the ",(0,n.jsx)(t.code,{children:"onRouteChange"})," callback when a route change has been processed."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"route"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"R"})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The route that was navigated to."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"state"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, unknown>"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The state that was passed to the route."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"corerouterequestpayload",children:"CoreRouteRequestPayload"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CoreRouteRequestPayload<R>"})," is the object that is passed to the ",(0,n.jsx)(t.code,{children:"onRouteRequest"})," callback when a route change request is pending and ready to act on."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"newRoute"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"R"})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The route that is being requested."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"newState"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, unknown>"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The state that is being passed to the requested route."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"oldRoute"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"R"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The route of the last request that was approved."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"oldState"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Record<string, unknown>"})}),(0,n.jsx)(t.td,{children:"no"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"The state of the last request that was approved."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"corerouteresponse",children:"CoreRouteResponse"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"CoreRouteResponse<R>"})," is the response that the consumer returns from within the ",(0,n.jsx)(t.code,{children:"onRouteRequest"})," callback when a route change request\nis pending and ready to act on. This is used to determine how the Core Router should proceed with the route change request and ",(0,n.jsx)("strong",{children:"thus is\nthe mechanisim by which consumers maintain absolute control over routing flow logic"}),"."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Scenario"}),(0,n.jsx)(t.th,{children:"Return type"}),(0,n.jsx)(t.th,{children:"Resulting behavior"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Auto-approve"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"void"})," (i.e. do nothing)"]}),(0,n.jsx)(t.td,{children:"Request is auto-approved and proceeds with route change."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Explicit approval/cancellation"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<boolean>"})}),(0,n.jsxs)(t.td,{children:["Resolving ",(0,n.jsx)(t.code,{children:"true"})," approves request and proceeds with route change; othwerwise, cancels route change."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect to route"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<R>"})}),(0,n.jsx)(t.td,{children:"Redirects to the provided route."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect to route with state"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[R, Record<string, unknown>]>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route provided in tuple's first element while applying state provided in second element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect to route with state and hash"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[R, Record<string, unknown>, string]>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route provided in tuple's first element while applying state provided in second element and requests scroll to target location's element via hash provided in third element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect to route with hash"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[R, string]>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route provided in tuple's first element and requests scroll to target location's element via hash provided in second element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect using path"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<string>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route corresponding with the respective path."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect using path with state"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[string, Record<string, unknown>]>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route corresponding with the respective path in tuple's first elment while applying state provided in second element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect using path with state and hash"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[string, Record<string, unknown>], string>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route corresponding with the respective path in tuple's first element while applying state provided in second element and requests scroll to target location's element via hash provided in third element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Redirect using path and hash"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"Promise<[string, string]>"})}),(0,n.jsx)(t.td,{children:"Redirects to the route corresponding with the respective path in tuple's first element and requests scroll to target location's element via hash provided in second element."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"oncoreroutechange",children:"OnCoreRouteChange"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"OnCoreRouteChange<R>"})," defines the signature for the callback that is invoked after a route change has been processed."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"type OnCoreRouteChange<R> = (payload: CoreRouteChangePayload<R>) => void;\n"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"payload"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#coreroutechangepayload",children:(0,n.jsx)(t.code,{children:"CoreRouteChangePayload<R>"})})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Object containing information about the route change that was just processed."})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"oncorerouterequest",children:"OnCoreRouteRequest"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"OnCoreRouteRequest<R>"})," is the signature for the callback that is invoked when a route change request is pending and ready to act on."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"type OnCoreRouteRequest<R> = (payload: CoreRouteRequestPayload<R>) => Promise<CoreRouteResponse<R>> | void;\n"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required?"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Comments"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"payload"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"#corerouterequestpayload",children:(0,n.jsx)(t.code,{children:"CoreRouteRequestPayload<R>"})})}),(0,n.jsx)(t.td,{children:"yes"}),(0,n.jsx)(t.td,{children:"-"}),(0,n.jsx)(t.td,{children:"Object containing information about the route change that is pending and ready to act on."})]})})]})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);