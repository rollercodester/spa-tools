"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[9555],{3988:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var o=n(7458),i=n(7996),a=n(5207);const s={title:"State Interpolation",pagination_label:"API Client Guide: State Interpolation",pagination_next:"api-client/guide-result-mapping",pagination_prev:"api-client/guide-caching",sidebar_label:"State Interpolation",slug:"/api-client/guides/state-interpolation"},l="State Interpolation",p={id:"api-client/guide-state-interpolation",title:"State Interpolation",description:"You may be wondering what the heck state interpolation even is. In the context of this guide, it's the ability to inject model state into API endpoint requests at runtime.",source:"@site/docs/api-client/guide-state-interpolation.mdx",sourceDirName:"api-client",slug:"/api-client/guides/state-interpolation",permalink:"/spa-tools/api-client/guides/state-interpolation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"State Interpolation",pagination_label:"API Client Guide: State Interpolation",pagination_next:"api-client/guide-result-mapping",pagination_prev:"api-client/guide-caching",sidebar_label:"State Interpolation",slug:"/api-client/guides/state-interpolation"},sidebar:"docs",previous:{title:"API Client Guide: Caching",permalink:"/spa-tools/api-client/guides/caching"},next:{title:"API Client Guide: Result Mapping",permalink:"/spa-tools/api-client/guides/result-mapping"}},r={},d=[];function c(t){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,o.jsx)(e.h1,{id:"state-interpolation",children:"State Interpolation"}),"\n",(0,o.jsx)(e.p,{children:"You may be wondering what the heck state interpolation even is. In the context of this guide, it's the ability to inject model state into API endpoint requests at runtime."}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"@spa-tools/api-client"})," utilizes a simple approach of matching variable names to automate state interpolation."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nasync function getUserTodos(userId, completed) {\n  const result = await callEndpoint(\n    'https://jsonplaceholder.typicode.com/users/:userId/todos',\n    {\n      interpolateUrlOptions: {\n        // here we request that all unused state be auto-interpolated\n        // into the query string\n        //\n        // so in this example since we only have one path param (:userId),\n        // any other state we pass into callEndpoint will be auto-interpolated\n        // into the query string (e.g. ?completed=true/false)\n        addUnusedStateToQueryString: true,\n      },\n    },\n    // the state we want to interpolate\n    { userId, completed }\n  );\n\n  console.log(result?.data);\n}\n\nasync function updateTodoCompletion(todoId, completed) {\n  const result = await callEndpoint(\n    'https://jsonplaceholder.typicode.com/todos/:todoId',\n    { requestOptions: { method: 'PATCH' } },\n    // with all HTTP fetch operations that require a request body (like PATCH)\n    // any state that cannot be used for path params will be auto-interpolated\n    // into the request body; note that this is the default behavior but can be\n    // overridden by setting addUnusedStateToRequestBody in requestOptions to false.\n    //\n    // so in this example since we only have one path param (:todoId),\n    // any other state we pass into callEndpoint will be auto-interpolated\n    // into the request body (e.g. { completed: true/false } )\n    { todoId, completed }\n  );\n\n  console.log(`Updated todo with ID \"${todoId}\":`);\n  console.log(result?.data);\n}\n\nawait getUserTodos({ userId: 3 });\n// --\x3e GET https://jsonplaceholder.typicode.com/users/3/todos\n\nawait getUserTodos({ completed: true, userId: 3 });\n// --\x3e GET https://jsonplaceholder.typicode.com/users/3/todos?completed=true\n\nawait getUserTodos({ completed: false, userId: 3 });\n// --\x3e GET https://jsonplaceholder.typicode.com/users/3/todos?completed=false\n\nawait updateTodoCompletion(10, true);\n// --\x3e PATCH https://jsonplaceholder.typicode.com/todos/10 with request body { completed: true }\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}}}]);