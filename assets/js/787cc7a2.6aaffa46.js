"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[7461],{5153:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var t=i(7458),s=i(7996),r=i(5207);const o={title:"Server-side Rendering",pagination_label:"Runtime Config Guide: SSR",pagination_next:"runtime-config/reference",pagination_prev:"runtime-config/guide-obfuscation",sidebar_label:"Server-side Rendering",slug:"/runtime-config/guides/ssr"},a="Server-side Rendering (SSR)",u={id:"runtime-config/guide-ssr",title:"Server-side Rendering",description:"If your SPA has to run in non-browser environments (e.g. for SSR) then the",source:"@site/docs/runtime-config/guide-ssr.mdx",sourceDirName:"runtime-config",slug:"/runtime-config/guides/ssr",permalink:"/spa-tools/runtime-config/guides/ssr",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Server-side Rendering",pagination_label:"Runtime Config Guide: SSR",pagination_next:"runtime-config/reference",pagination_prev:"runtime-config/guide-obfuscation",sidebar_label:"Server-side Rendering",slug:"/runtime-config/guides/ssr"},sidebar:"docs",previous:{title:"Runtime Config Guide: Obfuscation",permalink:"/spa-tools/runtime-config/guides/obfuscation"},next:{title:"Runtime Config: Reference",permalink:"/spa-tools/runtime-config/reference"}},c={},d=[];function g(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.D_,{packageName:"@spa-tools/runtime-config"}),"\n",(0,t.jsx)(n.h1,{id:"server-side-rendering-ssr",children:"Server-side Rendering (SSR)"}),"\n",(0,t.jsx)(n.p,{children:"If your SPA has to run in non-browser environments (e.g. for SSR) then the\nactive hostname obviously cannot be automatically detected by the Runtime Config."}),"\n",(0,t.jsx)(n.p,{children:"Consequently, to use Runtime Config server-side across mutliple environments will\nrequire some devops work to set the active environment at runtime. There is an option\nto manually set the active hostname, so from the Runtime Config perspective, it's\nvery trivial. Of course the downside is you must set this across your devops builds\nusing something akin to environment variables."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { myAppConfigSet } from './myapp-domain-config';\n\n// let's imagine that a quasi-environment variable is set\n// and is currently embedded in the code\nprocess.env.MYAPP_ACTIVE_HOSTNAME = 'myapp.com';\n\nexport const myAppRuntimeConfig = RuntimeConfig.initialize(myAppConfigSet, {\n  // for the correct config to be picked up during server-side\n  // rendering, you must manually set the active hostname, so\n  // here we are setting it to the value of the quasi env var\n  manualActiveHostname: process.env.MYAPP_ACTIVE_HOSTNAME,\n});\n\nconsole.log('The runtime config object we just initialized:');\nconsole.log(myAppRuntimeConfig);\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}}}]);