"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[2579],{6417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var i=n(7458),s=n(7996),a=n(5207);const l={title:"deepEqual",pagination_label:"Data Utilities: deepEqual",pagination_next:"utilities/data/deep-merge",pagination_prev:"utilities/data/deep-clone",sidebar_label:"deepEqual",slug:"/utilities/data/deep-equal"},d="deepEqual()",r={id:"utilities/data/deep-equal",title:"deepEqual",description:"The === operator is ubiquitous in JavaScript for strict comparison but unfortunately it cannot be",source:"@site/docs/utilities/data/deep-equal.mdx",sourceDirName:"utilities/data",slug:"/utilities/data/deep-equal",permalink:"/spa-tools/utilities/data/deep-equal",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"deepEqual",pagination_label:"Data Utilities: deepEqual",pagination_next:"utilities/data/deep-merge",pagination_prev:"utilities/data/deep-clone",sidebar_label:"deepEqual",slug:"/utilities/data/deep-equal"},sidebar:"docs",previous:{title:"Data Utilities: deepClone",permalink:"/spa-tools/utilities/data/deep-clone"},next:{title:"Data Utilities: deepMerge",permalink:"/spa-tools/utilities/data/deep-merge"}},o={},c=[{value:"Usage",id:"usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3}];function u(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,i.jsx)(t.h1,{id:"deepequal",children:"deepEqual()"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"==="})," operator is ubiquitous in JavaScript for strict comparison but unfortunately it cannot be\nused to compare semantic equality between underlying values of reference types, but ",(0,i.jsx)(t.code,{children:"deepEqual()"})," can!"]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { deepEqual } from '@spa-tools/utilities';\n\nconst person1 = {\n  address: {\n    city: 'New York',\n    country: 'USA',\n  },\n  hobbies: ['reading', 'coding'],\n  name: 'John',\n};\n\nconst person2 = person1;\n\nconst person3 = {\n  address: {\n    city: 'New York',\n    country: 'USA',\n  },\n  hobbies: ['reading', 'coding'],\n  name: 'John',\n};\n\nconsole.log(deepEqual(person1, person2));\n// --\x3e true\n\nconsole.log(deepEqual(person1, person3));\n// --\x3e true\n\nperson3.address.city = 'Los Angeles';\n\nconsole.log(deepEqual(person1, person3));\n// --\x3e false\n"})}),"\n",(0,i.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"a"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"any"})}),(0,i.jsx)(t.td,{children:"The first data item to compare"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"b"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"any"})}),(0,i.jsx)(t.td,{children:"The second data item to compare"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.p,{children:["Returns ",(0,i.jsx)(t.code,{children:"true"})," if values are semantically equal and ",(0,i.jsx)(t.code,{children:"false"})," if not."]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);