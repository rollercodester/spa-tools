"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[6237],{4773:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var o=t(7458),n=t(7996),r=t(5207);const i={title:"useIsOverflowed",pagination_label:"Interaction Hooks: useIsOverflowed",pagination_next:"interaction-hooks/use-query-state",pagination_prev:"interaction-hooks/use-is-hovered",sidebar_label:"useIsOverflowed",slug:"/interaction-hooks/use-is-overflowed"},l="useIsOverflowed()",d={id:"interaction-hooks/use-is-overflowed",title:"useIsOverflowed",description:"Even seemingly simple UX requirements can sometimes push us to search for ways of implementing behaviors while keeping",source:"@site/docs/interaction-hooks/use-is-overflowed.mdx",sourceDirName:"interaction-hooks",slug:"/interaction-hooks/use-is-overflowed",permalink:"/spa-tools/interaction-hooks/use-is-overflowed",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useIsOverflowed",pagination_label:"Interaction Hooks: useIsOverflowed",pagination_next:"interaction-hooks/use-query-state",pagination_prev:"interaction-hooks/use-is-hovered",sidebar_label:"useIsOverflowed",slug:"/interaction-hooks/use-is-overflowed"},sidebar:"docs",previous:{title:"Interaction Hooks: useIsHovered",permalink:"/spa-tools/interaction-hooks/use-is-hovered"},next:{title:"Interaction Hooks: useQueryState",permalink:"/spa-tools/interaction-hooks/use-query-state"}},c={},a=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3}];function h(e){const s={code:"code",em:"em",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.D_,{packageName:"@spa-tools/interaction-hooks"}),"\n",(0,o.jsx)(s.h1,{id:"useisoverflowed",children:"useIsOverflowed()"}),"\n",(0,o.jsxs)(s.p,{children:["Even seemingly simple UX requirements can sometimes push us to search for ways of implementing behaviors while keeping\ncode DRY and succinct. The ",(0,o.jsx)(s.code,{children:"useIsOverflowed"})," hook solves exactly one of those use cases by detecting when content of\nan element is overflowed."]}),"\n",(0,o.jsx)(s.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport { useIsOverflowed } from '@spa-tools/interaction-hooks';\n\nfunction UseIsOverflowedExample() {\n  const sectionRef = useRef<HTMLDivElement>(null);\n  const isVerticallyOverflowed = useIsOverflowed(sectionRef);\n\n  return (\n    <div ref={sectionRef} style={{ height: '100vh', overflowY: 'auto' }}>\n      <div style={{ height: '200vh' }}>\n        <h1>Scroll me</h1>\n        <h2>{isVerticallyOverflowed ? 'Overflowed vertically' : 'Not overflowed vertically'}</h2>\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(s.table,{children:[(0,o.jsx)(s.thead,{children:(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.th,{children:"Name"}),(0,o.jsx)(s.th,{children:"Type"}),(0,o.jsx)(s.th,{children:"Required?"}),(0,o.jsx)(s.th,{children:"Default"}),(0,o.jsx)(s.th,{children:"Description"})]})}),(0,o.jsxs)(s.tbody,{children:[(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"elem"})}),(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"React.RefObject"})}),(0,o.jsx)(s.td,{children:"yes"}),(0,o.jsx)(s.td,{children:"-"}),(0,o.jsx)(s.td,{children:"Holds a ref to the target element we want to watch for overflow"})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"direction"})}),(0,o.jsxs)(s.td,{children:[(0,o.jsx)(s.code,{children:"'vertical'"})," | ",(0,o.jsx)(s.code,{children:"'horizontal'"})]}),(0,o.jsx)(s.td,{children:"no"}),(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"'vertical'"})}),(0,o.jsx)(s.td,{children:"The direction we want to watch for overflow"})]}),(0,o.jsxs)(s.tr,{children:[(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"triggerOffset"})}),(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"number"})}),(0,o.jsx)(s.td,{children:"no"}),(0,o.jsx)(s.td,{children:(0,o.jsx)(s.code,{children:"0"})}),(0,o.jsxs)(s.td,{children:["The offset in pixels of the target element that will trigger overflow detection (",(0,o.jsx)(s.em,{children:"top offset"})," for ",(0,o.jsx)(s.code,{children:"vertical"})," or ",(0,o.jsx)(s.em,{children:"left offset"})," for ",(0,o.jsx)(s.code,{children:"horizontal"}),")"]})]})]})]}),"\n",(0,o.jsx)(s.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(s.p,{children:["Returns ",(0,o.jsx)(s.code,{children:"boolean"})," that will be ",(0,o.jsx)(s.code,{children:"true"})," when the respective target element is being overflowed."]})]})}function u(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);