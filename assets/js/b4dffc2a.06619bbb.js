"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[2998],{4615:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var a=n(7458),i=n(7996),o=n(5207);const s={title:"Caching",pagination_label:"API Client Guide: Caching",pagination_next:"api-client/guide-state-interpolation",pagination_prev:"api-client/guide-throttling",sidebar_label:"Caching",slug:"/api-client/guides/caching"},c="Caching",l={id:"api-client/guide-caching",title:"Caching",description:"Like throttling, caching is crucial for high-scale backend APIs, but when should you consider caching API results on the frontend?",source:"@site/docs/api-client/guide-caching.mdx",sourceDirName:"api-client",slug:"/api-client/guides/caching",permalink:"/spa-tools/api-client/guides/caching",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Caching",pagination_label:"API Client Guide: Caching",pagination_next:"api-client/guide-state-interpolation",pagination_prev:"api-client/guide-throttling",sidebar_label:"Caching",slug:"/api-client/guides/caching"},sidebar:"docs",previous:{title:"API Client Guide: Throttling",permalink:"/spa-tools/api-client/guides/throttling"},next:{title:"API Client Guide: State Interpolation",permalink:"/spa-tools/api-client/guides/state-interpolation"}},r={},h=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.D_,{packageName:"@spa-tools/api-client"}),"\n",(0,a.jsx)(t.h1,{id:"caching",children:"Caching"}),"\n",(0,a.jsx)(t.p,{children:"Like throttling, caching is crucial for high-scale backend APIs, but when should you consider caching API results on the frontend?"}),"\n",(0,a.jsx)(t.p,{children:"Simply, if the same slice of API data is utilized in multiple places within your app, then caching should be an option to consider. True, there are many differrent approaches to tackle this scenario...from centralized state management like Redux or MobX, to other approaches like React Context, reducer hooks, and even passing data to children via props. While each of these tactics may have merit, one must admit that they also come with drawbacks and annoyances."}),"\n",(0,a.jsxs)(t.p,{children:["Wouldn't it be nice to just call your data client from anywhere in your app without having to worry about annoying boilerplate and configuration bloat? Good news is the ",(0,a.jsx)(t.code,{children:"@spa-tools/api-client"})," has you covered with built-in caching that is super-easy!"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { callEndpoint } from '@spa-tools/api-client';\n\nasync function getAlbumPhotos(albumId: number) {\n  const result = await callEndpoint(\n    'https://jsonplaceholder.typicode.com/albums/:albumId/photos',\n    // pass in an options object to configure the cache settings\n    {\n      consoleOptions: {\n        // turn console logging ON for cache hits so we can\n        // easily see every time a request is cached, which\n        // is useful for debugging and understanding how the\n        // cache is working; however, it's advised to keep\n        // this turned off in production environments\n        logThrottleCacheHits: true,\n        //\n        // set the threshold for the number of cache hits that can\n        // occur within the configured TTL before an error-warning\n        // is logged to the console\n        //\n        // the real-world goal here is to use this error-warning as\n        // a bug indicator to know when your app is making too many\n        // dupe requests. The threshold is of course dependent on\n        // how data calls are made in conjunction with your render\n        // logic. For example, a React app that makes data requests\n        // via useEffect hooks can easily result in unexpected dupe\n        // calls that are par for the course, so a higher threshold\n        // setting would make sense in that scenario.\n        logThrottleWarningsThreshold: 3,\n      },\n      frequencyOptions: {\n        // set the frequency strategy to 'memory-cache'; however,\n        // you can also set this to 'session-cache' if you would\n        // prefer to not cache data in memory, but rather in the\n        // browser's session storage\n        frequencyStrategy: 'memory-cache',\n        // set the time-to-live for the cache (in ms), meaning\n        // a dupe call will be allowed after this time has passed\n        frequencyStrategyTTL: 300,\n      },\n    },\n    // set state object to interpolate path parameter value\n    { albumId }\n  );\n\n  console.log(`Photos for album with ID \"${albumId}\":`);\n  console.log(result?.data);\n}\n\n// first (2) calls are distinct and will be made to API endpoint\nawait getAlbumPhotos(4);\nawait getAlbumPhotos(5);\n// for the following (3) calls, results will be served from cache\n// and no more calls will be made to the API endpoint\nawait getAlbumPhotos(5);\nawait getAlbumPhotos(5);\nawait getAlbumPhotos(5);\n\nsetTimeout(async () => {\n  // cache will expire after 300ms so this call will be made\n  // and refreshed data will be returned\n  await getAlbumPhotos(5);\n}, 350);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);