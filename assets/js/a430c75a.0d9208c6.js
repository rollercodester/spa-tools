"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[9274],{6597:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=s(7458),a=s(7996),n=s(5207);const r={title:"asStrategy",pagination_label:"Type Helpers: asStrategy",pagination_next:"utilities/type-helpers/inline-switch",pagination_prev:"utilities/strings/separate-words",sidebar_label:"asStrategy",slug:"/utilities/type-helpers/asStrategy"},l="asStrategy()",o={id:"utilities/type-helpers/as-strategy",title:"asStrategy",description:"The asStrategy() is a TypeScript utility returns a function, which accepts",source:"@site/docs/utilities/type-helpers/as-strategy.mdx",sourceDirName:"utilities/type-helpers",slug:"/utilities/type-helpers/asStrategy",permalink:"/spa-tools/utilities/type-helpers/asStrategy",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"asStrategy",pagination_label:"Type Helpers: asStrategy",pagination_next:"utilities/type-helpers/inline-switch",pagination_prev:"utilities/strings/separate-words",sidebar_label:"asStrategy",slug:"/utilities/type-helpers/asStrategy"},sidebar:"docs",previous:{title:"String Utilities: separateWords",permalink:"/spa-tools/utilities/strings/separate-words"},next:{title:"Type Helpers: inlineSwitch",permalink:"/spa-tools/utilities/type-helpers/inline-switch"}},c={},p=[{value:"Usage",id:"usage",level:3}];function h(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.D_,{packageName:"@spa-tools/utilities"}),"\n",(0,i.jsx)(t.h1,{id:"asstrategy",children:"asStrategy()"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"asStrategy<P>()"})," is a TypeScript utility returns a function, which accepts\na ",(0,i.jsx)(t.code,{children:"Record"})," type and returns it as to enable intellisense on the respective record's\nkeys in the IDE, similar to behavior of a class instance (or static)."]}),"\n",(0,i.jsxs)(t.p,{children:["This becomes useful if you have a complex object that you want to use in a ",(0,i.jsx)(t.code,{children:"Record"}),"\nand use it in many places so getting intellisense on the record's keys really helps."]}),"\n",(0,i.jsxs)(t.p,{children:["The generic ",(0,i.jsx)(t.code,{children:"P"})," defines the type (or unioned types) returned from the strategy ",(0,i.jsx)(t.code,{children:"Record"})," values."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { asStrategy } from '@spa-tools/utilities';\n\nconst asMyInterface = asStrategy<string | number>();\n\nconst myInterfaceObj = asMyInterface({\n  foo: 'hello',\n  bar: 42,\n});\n\n// now you can access the keys of myInterfaceObj and the\n// IDE will magically provide intellisense for the keys\nconsole.log(myInterfaceObj.foo);\n"})})]})}function y(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);