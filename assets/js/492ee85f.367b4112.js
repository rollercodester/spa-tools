"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[8036],{6514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var o=n(7458),i=n(7996),s=n(5207);const r={title:"useDetectKeyDown",pagination_label:"Interaction Hooks: useDetectKeyDown",pagination_next:"interaction-hooks/use-infinite-scroll",pagination_prev:"interaction-hooks/use-call-once",sidebar_label:"useDetectKeyDown",slug:"/interaction-hooks/use-detect-keydown"},l="useDetectKeyDown()",d={id:"interaction-hooks/use-detect-keydown",title:"useDetectKeyDown",description:"Have you ever had to write a simple form that needed a little validation that didn't warrant pulling in a kitchen-sink form validation library?",source:"@site/docs/interaction-hooks/use-detect-keydown.mdx",sourceDirName:"interaction-hooks",slug:"/interaction-hooks/use-detect-keydown",permalink:"/spa-tools/interaction-hooks/use-detect-keydown",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useDetectKeyDown",pagination_label:"Interaction Hooks: useDetectKeyDown",pagination_next:"interaction-hooks/use-infinite-scroll",pagination_prev:"interaction-hooks/use-call-once",sidebar_label:"useDetectKeyDown",slug:"/interaction-hooks/use-detect-keydown"},sidebar:"docs",previous:{title:"Interaction Hooks: useCallOnce",permalink:"/spa-tools/interaction-hooks/use-call-once"},next:{title:"Interaction Hooks: useInfiniteScroll",permalink:"/spa-tools/interaction-hooks/use-infinite-scroll"}},c={},a=[{value:"Usage",id:"usage",level:2},{value:"Method overloads",id:"method-overloads",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"DetectKeyDownTuple",id:"detectkeydowntuple",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.D_,{packageName:"@spa-tools/interaction-hooks"}),"\n",(0,o.jsx)(t.h1,{id:"usedetectkeydown",children:"useDetectKeyDown()"}),"\n",(0,o.jsx)(t.p,{children:"Have you ever had to write a simple form that needed a little validation that didn't warrant pulling in a kitchen-sink form validation library?"}),"\n",(0,o.jsxs)(t.p,{children:["If you need to hook into keyboard entry to handroll some input validation then the ",(0,o.jsx)(t.code,{children:"useDetectKeyDown"})," hook is for you."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import { useEffect, useRef } from 'react';\nimport { useDetectKeyDown } from '@spa-tools/interaction-hooks';\n\nfunction UseDetectKeyDownExample() {\n  // here we wire up a ref for the submit button that we will auto-click\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n  // here we ask the hook to set onKeyDownInput1KeyDetected to true\n  // when the Shift-Ctrl-P keys are pressed\n  const [onKeyDownInput1, pShiftControlKeysDetected] = useDetectKeyDown('P', ['Shift', 'Control']);\n  // here we ask the hook to auto-click the submit button when\n  // the Enter key is pressed\n  const [onKeyDownInput2] = useDetectKeyDown('Enter', submitButtonRef);\n\n  useEffect(() => {\n    // we simply alert when the Shift-Ctrl-P keys are detected\n    if (pShiftControlKeysDetected) {\n      alert('Shift-Ctrl-P detected!');\n    }\n  }, [pShiftControlKeysDetected]);\n\n  return (\n    <div>\n      <div>\n        <input onKeyDown={onKeyDownInput1} placeholder='Focus here and press Shift-Ctrl-P' />\n      </div>\n      <div>\n        <input onKeyDown={onKeyDownInput2} placeholder='Type something here and press Enter' />\n        <button\n          onClick={() => {\n            alert('Submit button clicked!');\n          }}\n          ref={submitButtonRef}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"method-overloads",children:"Method overloads"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useDetectKeyDown()"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useDetectKeyDown(key)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useDetectKeyDown(key, modifierKeys)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useDetectKeyDown(key, elementToAutoClickRef)"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"useDetectKeyDown(key, modifierKeys, elementToAutoClickRef)"})}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"-"}),(0,o.jsx)(t.td,{children:"-"}),(0,o.jsxs)(t.td,{children:["No parameters will default to detecting the ",(0,o.jsx)(t.code,{children:"Enter"})," key"]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"key"}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsx)(t.td,{children:"The key to detect"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"modifierKeys"}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"React.ModifierKey[]"})}),(0,o.jsx)(t.td,{children:"An array of modifier keys to detect in conjunction with the main key"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"elementToAutoClickRef"}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"React.RefObject<HTMLElement>"})}),(0,o.jsx)(t.td,{children:"A ref to the element to auto-click when the key is detected"})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(t.p,{children:["Returns a ",(0,o.jsx)(t.a,{href:"#detectkeydowntuple",children:(0,o.jsx)(t.code,{children:"DetectKeyDownTuple"})}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"detectkeydowntuple",children:"DetectKeyDownTuple"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"DetectKeyDownTuple"})," is a tuple returned from the ",(0,o.jsx)(t.code,{children:"useDetectKeyDown"})," hook and contains the following positional elements in order:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"keyboardEventHandler"})," - A ",(0,o.jsx)(t.code,{children:"React.KeyboardEventHandler"})," event handler"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"keyDetected"})," - A ",(0,o.jsx)(t.code,{children:"boolean"})," that returns ",(0,o.jsx)(t.code,{children:"true"})," when the requested key (and optional modifiers) are pressed down"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);