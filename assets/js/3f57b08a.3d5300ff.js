"use strict";(self.webpackChunk_spa_tools_website=self.webpackChunk_spa_tools_website||[]).push([[7236],{4861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var o=t(7458),s=t(7996),i=t(5207);const c={title:"useCallOnce",pagination_label:"Interaction Hooks: useCallOnce",pagination_next:"interaction-hooks/use-detect-keydown",pagination_prev:"interaction-hooks/getting-started",sidebar_label:"useCallOnce",slug:"/interaction-hooks/use-call-once"},a="useCallOnce()",r={id:"interaction-hooks/use-call-once",title:"useCallOnce",description:"If you've ever tried to run a block of code only once in a React function component, then you know how tricky it can be. Even using proper dependencies with a useEffect hook can come back to bite you.",source:"@site/docs/interaction-hooks/use-call-once.mdx",sourceDirName:"interaction-hooks",slug:"/interaction-hooks/use-call-once",permalink:"/spa-tools/interaction-hooks/use-call-once",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useCallOnce",pagination_label:"Interaction Hooks: useCallOnce",pagination_next:"interaction-hooks/use-detect-keydown",pagination_prev:"interaction-hooks/getting-started",sidebar_label:"useCallOnce",slug:"/interaction-hooks/use-call-once"},sidebar:"docs",previous:{title:"Interaction Hooks: Getting Started",permalink:"/spa-tools/interaction-hooks"},next:{title:"Interaction Hooks: useDetectKeyDown",permalink:"/spa-tools/interaction-hooks/use-detect-keydown"}},l={},d=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.D_,{packageName:"@spa-tools/interaction-hooks"}),"\n",(0,o.jsx)(n.h1,{id:"usecallonce",children:"useCallOnce()"}),"\n",(0,o.jsxs)(n.p,{children:["If you've ever tried to run a block of code only once in a React function component, then you know how tricky it can be. Even using proper dependencies with a ",(0,o.jsx)(n.code,{children:"useEffect"})," hook can come back to bite you."]}),"\n",(0,o.jsxs)(n.p,{children:["A good way to do this in React is via an initialization (aka use-once) pattern using a ",(0,o.jsx)(n.code,{children:"useRef"})," hook. To keep things DRY and minimize code, we've wrapped this pattern in the ",(0,o.jsx)(n.code,{children:"useCallOnce"})," hook."]}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useEffect, useState } from 'react';\nimport { useCallOnce } from '@spa-tools/interaction-hooks';\n\n// this is the function we want to call only once\nfunction logOnce(message: string) {\n  console.log('This will only log once:', message);\n}\n\nexport function UseCallOnceHookExample() {\n  const [time, setTime] = useState(new Date());\n\n  // here we setup some code to force a re-render every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // here we use the hook to call the function\n  // so that it's guaranteed to only execute once\n  useCallOnce(logOnce, 'Hello, world!');\n\n  return <p>Current time: {time.toLocaleTimeString()}</p>;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Required?"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"func"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Function"})}),(0,o.jsx)(n.td,{children:"yes"}),(0,o.jsx)(n.td,{children:"The function you want to call only once"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"args"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"unknown[]"})}),(0,o.jsx)(n.td,{children:"no"}),(0,o.jsx)(n.td,{children:"The arguments to pass to the function"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["Returns ",(0,o.jsx)(n.code,{children:"void"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);